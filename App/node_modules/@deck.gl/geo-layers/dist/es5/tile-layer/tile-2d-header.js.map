{"version":3,"sources":["../../../src/tile-layer/tile-2d-header.js"],"names":["Tile2DHeader","x","y","z","isVisible","isSelected","parent","children","content","_loaderId","_isLoaded","_isCancelled","_needsReload","getData","requestScheduler","onLoad","onError","bbox","loaderId","_abortController","AbortController","signal","scheduleRequest","tile","requestToken","done","tileData","error","_loader","undefined","opts","_loadData","isLoading","abort","isLoaded","then","data","Boolean","result","byteLength","Number","isFinite","log"],"mappings":";;;;;;;;;;;;;;;;;AACA;;IAEqBA,Y;AACnB,8BAAuB;AAAA,QAAVC,CAAU,QAAVA,CAAU;AAAA,QAAPC,CAAO,QAAPA,CAAO;AAAA,QAAJC,CAAI,QAAJA,CAAI;AAAA;AACrB,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,GAAgB,EAAhB;AAEA,SAAKC,OAAL,GAAe,IAAf;AAEA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACD;;;;;;;;;;;AA2BgBC,gBAAAA,O,SAAAA,O,EAASC,gB,SAAAA,gB,EAAkBC,M,SAAAA,M,EAAQC,O,SAAAA,O;AAC3Cf,gBAAAA,C,GAAiB,I,CAAjBA,C,EAAGC,C,GAAc,I,CAAdA,C,EAAGC,C,GAAW,I,CAAXA,C,EAAGc,I,GAAQ,I,CAARA,I;AACVC,gBAAAA,Q,GAAW,KAAKT,S;AAEtB,qBAAKU,gBAAL,GAAwB,IAAIC,eAAJ,EAAxB;AACOC,gBAAAA,M,GAAU,KAAKF,gB,CAAfE,M;;uBAEoBP,gBAAgB,CAACQ,eAAjB,CAAiC,IAAjC,EAAuC,UAAAC,IAAI,EAAI;AACxE,yBAAOA,IAAI,CAAClB,UAAL,GAAkB,CAAlB,GAAsB,CAAC,CAA9B;AACD,iBAF0B,C;;;AAArBmB,gBAAAA,Y;;oBAIDA,Y;;;;;AACH,qBAAKb,YAAL,GAAoB,IAApB;;;;qBAIE,KAAKA,Y;;;;;AACPa,gBAAAA,YAAY,CAACC,IAAb;;;;AAIEC,gBAAAA,Q,GAAW,I;;;uBAGIb,OAAO,CAAC;AAACZ,kBAAAA,CAAC,EAADA,CAAD;AAAIC,kBAAAA,CAAC,EAADA,CAAJ;AAAOC,kBAAAA,CAAC,EAADA,CAAP;AAAUc,kBAAAA,IAAI,EAAJA,IAAV;AAAgBI,kBAAAA,MAAM,EAANA;AAAhB,iBAAD,C;;;AAAxBK,gBAAAA,Q;;;;;;;AAEAC,gBAAAA,KAAK,GAAG,eAAO,IAAf;;;;AAEAH,gBAAAA,YAAY,CAACC,IAAb;;;;sBAIEP,QAAQ,KAAK,KAAKT,S;;;;;;;;AAItB,qBAAKmB,OAAL,GAAeC,SAAf;AAGA,qBAAKrB,OAAL,GAAekB,QAAf;;sBAGI,KAAKf,YAAL,IAAqB,CAACe,Q;;;;;AACxB,qBAAKhB,SAAL,GAAiB,KAAjB;;;;AAGF,qBAAKA,SAAL,GAAiB,IAAjB;AACA,qBAAKC,YAAL,GAAoB,KAApB;;AAEA,oBAAIgB,KAAJ,EAAW;AACTX,kBAAAA,OAAO,CAACW,KAAD,EAAQ,IAAR,CAAP;AACD,iBAFD,MAEO;AACLZ,kBAAAA,MAAM,CAAC,IAAD,CAAN;AACD;;;;;;;;;;;;;;;;;;6BAIMe,I,EAAM;AACb,WAAKpB,SAAL,GAAiB,KAAjB;AACA,WAAKC,YAAL,GAAoB,KAApB;AACA,WAAKC,YAAL,GAAoB,KAApB;AACA,WAAKH,SAAL;AACA,WAAKmB,OAAL,GAAe,KAAKG,SAAL,CAAeD,IAAf,CAAf;AACA,aAAO,KAAKF,OAAZ;AACD;;;qCAEgB;AACf,UAAI,KAAKI,SAAT,EAAoB;AAClB,aAAKC,KAAL;AACA,aAAKL,OAAL,GAAeC,SAAf;AACD;;AACD,WAAKjB,YAAL,GAAoB,IAApB;AACD;;;4BAEO;AACN,UAAI,KAAKsB,QAAT,EAAmB;AACjB;AACD;;AAED,WAAKvB,YAAL,GAAoB,IAApB;;AACA,WAAKQ,gBAAL,CAAsBc,KAAtB;AACD;;;wBA1GU;AAAA;;AACT,aAAO,KAAKD,SAAL,GAAiB,KAAKJ,OAAL,CAAaO,IAAb,CAAkB;AAAA,eAAM,KAAI,CAACC,IAAX;AAAA,OAAlB,CAAjB,GAAsD,KAAK5B,OAAlE;AACD;;;wBAEc;AACb,aAAO,KAAKE,SAAL,IAAkB,CAAC,KAAKE,YAA/B;AACD;;;wBAEe;AACd,aAAOyB,OAAO,CAAC,KAAKT,OAAN,CAAP,IAAyB,CAAC,KAAKjB,YAAtC;AACD;;;wBAEiB;AAChB,aAAO,KAAKC,YAAL,IAAqB,KAAKD,YAAjC;AACD;;;wBAEgB;AACf,UAAM2B,MAAM,GAAG,KAAK9B,OAAL,GAAe,KAAKA,OAAL,CAAa+B,UAA5B,GAAyC,CAAxD;;AACA,UAAI,CAACC,MAAM,CAACC,QAAP,CAAgBH,MAAhB,CAAL,EAA8B;AAC5BI,kBAAIf,KAAJ,CAAU,qCAAV;AACD;;AACD,aAAOW,MAAP;AACD","sourcesContent":["/* eslint-env browser */\nimport {log} from '@deck.gl/core';\n\nexport default class Tile2DHeader {\n  constructor({x, y, z}) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data() {\n    return this.isLoading ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded() {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading() {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload() {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength() {\n    const result = this.content ? this.content.byteLength : 0;\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n    return result;\n  }\n\n  /* eslint-disable max-statements */\n  async _loadData({getData, requestScheduler, onLoad, onError}) {\n    const {x, y, z, bbox} = this;\n    const loaderId = this._loaderId;\n\n    this._abortController = new AbortController(); // eslint-disable-line no-undef\n    const {signal} = this._abortController;\n\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData = null;\n    let error;\n    try {\n      tileData = await getData({x, y, z, bbox, signal});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n  /* eslint-enable max-statements */\n\n  loadData(opts) {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload() {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n\n  abort() {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    this._abortController.abort();\n  }\n}\n"],"file":"tile-2d-header.js"}